#!/bin/bash
# vim: set ft=sh

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

TMPDIR=${TMPDIR:-/tmp}

source "$(dirname "$0")/common.sh"

payload="$(mktemp "${TMPDIR}/gitlab-merge-request-resource.XXXXXX")"

cat > "${payload}" <&0

configure_ssl_verification "${payload}"

printf "\nPayload: $(cat ${payload})"

uri="$(jq -r '.source.uri // ""' < "${payload}")"
private_token="$(jq -r '.source.private_token // ""' < "${payload}")"
merge_into="$(jq -r '.source.merge_into // ""' < "${payload}")"
no_ssl="$(jq -r '.source.no_ssl // ""' < "${payload}")"
version_sha="$(jq -r '.version.sha // ""' < "${payload}")"
branch="$(jq -r '.version.branch // ""' < "${payload}")"
iid="$(jq -r '.version.iid // ""' < "${payload}")"
last_commit_epoch="$(jq -r '.version.last_commit_epoch // ""' < "${payload}")"

if [ -z "${merge_into}" ]; then
    merge_into="master"
fi

if [[ "${uri}" == *"git@"* ]]; then
  gitlab_host="$(echo "${uri}" | sed -rn 's/.*git@(.*):([0-9]*\/+)?(.*)\.git/\1/p')"
  port="$(echo "${uri}" | sed -rn 's/.*git@(.*):([0-9]*\/+)?(.*)\.git/\2/p')"
  port=${port///} # remove trailing slash
  project_path="$(echo "${uri}" | sed -rn 's/.*git@(.*):([0-9]*\/+)?(.*)\.git/\3/p')"
  protocol='https'
else
  gitlab_host="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\2/p')"
  project_path="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\3/p')"
  protocol="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\1/p')"
fi

if [ "${no_ssl}" == 'true' ]; then
    protocol='http'
fi

version_updated_at=0
if [ -n "${last_commit_epoch}" ]; then
    version_updated_at=${last_commit_epoch}
elif [ -n "${version_sha}" ]; then
    gitlab_committed_date="$(curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/repository/commits/${version_sha}" \
        | jq -r '.committed_date')"
    version_updated_at=$(date -d "${gitlab_committed_date}" +%s)
fi
printf "\nVersion updated at: %s" "${version_updated_at}"

open_mrs="$(curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/merge_requests?state=opened&order_by=updated_at&wip=no&per_page=100" | jq "[ .[] | select (.target_branch == \"${merge_into}\")]")"
num_mrs="$(echo "${open_mrs}" | jq 'length')"
printf "\nNumber of open mrs: %s" "${num_mrs}"

printf "\nChecking for new updates..."

new_versions=''
for i in $(seq 0 $((num_mrs - 1))); do
    mr="$(echo "${open_mrs}" | jq -r '.['"$i"']')"
    mr_title="$(echo "${mr}" | jq -r '.title')"
    mr_target_branch="$(echo "${mr}" | jq -r '.target_branch')"
    mr_wip="$(echo "${mr}" | jq -r '.work_in_progress')"
    mr_sha="$(echo "${mr}" | jq -r '.sha')"
    mr_branch="$(echo "${mr}" | jq -r '.source_branch')"
    mr_iid="$(echo "${mr}" | jq -r '.iid')"
    printf "\n\nChecking mr %s..." "${mr_title}"
    printf "\nsha: %s" "${mr_sha}"
    if [ "${mr_sha}" != "null" ]; then
        gitlab_committed_date="$(curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/repository/commits/${mr_sha}" \
            | jq -r '.committed_date')"
        mr_updated_at=$(date -d "$gitlab_committed_date" +%s)
        printf "\nChecking MR(%s) sha(%s) updated date %s against version updated date %s" "${mr_branch}" "${mr_sha}" "${mr_updated_at}" "${version_updated_at}\n"
        if [ "${mr_updated_at}" -gt "${version_updated_at}" ] || [ -z "${version_sha}" ]; then
            printf "\n\tAdding to versions file"
            new_versions="{\"sha\":\"${mr_sha}\", \"branch\":\"${mr_branch}\", \"iid\":\"${mr_iid}\", \"last_commit_epoch\":\"${mr_updated_at}\"},${new_versions}"
        else
            printf "\n\tNot adding to versions file"
        fi
    fi
done

new_versions="${new_versions%,}" # remove trailing comma
new_versions="${new_versions%,}" # just in case there's a rogue second one.
new_versions="[${new_versions}]" # make JSON array

new_versions=$(echo ${new_versions} | jq 'sort_by(.last_commit_epoch | tonumber)')
printf "\nNewVersions=%s" "${new_versions}"

# If a version sha is passed in, add that sha to the output.
if [ -n "${version_sha}" ] && [ -n "${branch}" ] && [ -n "${iid}" ]; then
    printf "\nVersion sha %s passed in, adding to output" "${version_sha}"
    printf "\n{\"sha\":\"${version_sha}\", \"branch\":\"${branch}\", \"iid\":\"${iid}\", \"last_commit_epoch\":\"${last_commit_epoch}\"}\n"
    last="{\"sha\":\"${version_sha}\", \"branch\":\"${branch}\", \"iid\":\"${iid}\", \"last_commit_epoch\":\"${last_commit_epoch}\"}"
    rest=$(echo ${new_versions} | cut -c 2- )
    new_versions=$(echo "[${last},${rest}")
    printf "\nNewVersionsWithOld=%s" "${new_versions}"
    new_versions=$(echo ${new_versions} | sed "s/,]/]/") # remove trailing comma
    printf "\nNewVersionsWithRemovedLastComma=%s" "${new_versions}"
fi

if [ "${new_versions}" == '[]' ] && ! [ -z "${version_sha}" ]; then
    new_versions="[{\"sha\":\"${version_sha}\", \"branch\":\"${branch}\", \"iid\":\"${iid}\", \"last_commit_epoch\":\"${mr_updated_at}\"}]"
fi
versions_file="$(mktemp  "${TMPDIR}/gitlab-version-output.XXXXXX")"
printf "\nNew versions: ${new_versions}"
echo "${new_versions}" > "${versions_file}"

jq -n "${new_versions}" >&3
